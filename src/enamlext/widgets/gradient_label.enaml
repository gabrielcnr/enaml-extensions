from enaml.widgets.api import Label
from enaml.styling import StyleSheet, Style, Setter
from enaml.colors import Color

_DEFAULT_COLOR_START = "#4790DE"
_DEFAULT_COLOR_END = "#000000"

# TODO: implement font dialog and font combobox

enamldef GradientLabel(Label):
    attr color_0 = _DEFAULT_COLOR_START
    attr color_1 = _DEFAULT_COLOR_START
    attr color_2 = _DEFAULT_COLOR_END
    attr color_3 = _DEFAULT_COLOR_END
    attr stop_0 = 0
    attr stop_1 = 0.8
    attr stop_2 = 0.8
    attr stop_3 = 1
    attr x1 = 0
    attr y1 = 0
    attr x2 = 0
    attr y2 = 1
    attr font_color = "#ffffff"

    StyleSheet:
        Style:
            element = 'Label'
            style_class = 'gradient-label'
            Setter:
                field = 'background'
                value << (f'lineargradient(x1: {x1}, y1:{y1}, x2:{x2}, y2:{y2}, '
                            f'stop: {stop_0} {color_0}, stop: {stop_1} {color_1}, '
                            f'stop: {stop_2} {color_2}, stop: {stop_3} {color_3})')
            Setter:
                field = 'border'
                value = '1px solid #034994'
            Setter:
                field = 'padding'
                value = '2px'
            Setter:
                field = 'color'
                value << font_color
        Style:
            style_class = 'large-font'
            Setter:
                field = 'font'
                value = 'bold 12pt Segoe UI'
        Style:
            element = 'Label'
            style_class = 'bold'
            Setter:
                field = 'font'
                value = 'bold 10pt Segoe UI'

    style_class = "gradient-label bold large-font"


from enaml.widgets.api import MainWindow, Container, PushButton, ColorDialog


enamldef ColorButton(PushButton):
    attr color = Color()

    # how to make this one read-only?
    attr hex_color

    initialized ::
        self.hex_color = self.to_hex(self.color)

    color ::
        self.hex_color = self.to_hex(self.color)


    func to_hex(color):
        return (f"#"
                f"{color.alpha:02x}"
                f"{color.red:02x}"
                f"{color.green:02x}"
                f"{color.blue:02x}")

    StyleSheet:
        Style:
            element = "PushButton"
            style_class = "color-picker-button"
            Setter:
                field = "background"
                value << hex_color or "white"
            Setter:
                field = 'border'
                value = '1px solid #034994'

    style_class = "color-picker-button"

    constraints << [
        height == width,
    ]

    clicked ::
        chosen_color = ColorDialog().get_color()
        if chosen_color:
            self.color = chosen_color


enamldef CustomGradientLabel(GradientLabel):
    func print_properties():
        print(f"{font_color = }",
              f"{x1 = }",
              f"{x2 = }",
              f"{y1 = }",
              f"{y2 = }",
              f"{stop_0 = }",
              f"{stop_1 = }",
              f"{stop_2 = }",
              f"{stop_3 = }",
              f"{color_0 = }",
              f"{color_1 = }",
              f"{color_2 = }",
              f"{color_3 = }",
              sep="\n")


from enaml.widgets.api import Form, SpinBox
enamldef Main(MainWindow):

    title = "Gradient Label Studio"

    Container:
        CustomGradientLabel: lbl:
            text = "Hello World"

        Form:

            Label:
                text = "color_0"
            ColorButton:
                hex_color >> lbl.color_0

            Label:
                text = "color_1"
            ColorButton:
                hex_color >> lbl.color_1

            Label:
                text = "color_2"
            ColorButton:
                hex_color >> lbl.color_2

            Label:
                text = "color_3"
            ColorButton:
                hex_color >> lbl.color_3

            Label:
                text = "x1"
            SpinBox:
                minimum = 0
                maximum = 100
                value = int(lbl.x1 * 100)
                value ::
                    lbl.x1 = value / 100.

            Label:
                text = "x2"
            SpinBox:
                minimum = 0
                maximum = 100
                value = int(lbl.x2 * 100)
                value ::
                    print("setting")
                    lbl.x2 = value / 100.

            Label:
                text = "y1"
            SpinBox:
                minimum = 0
                maximum = 100
                value = int(lbl.y1 * 100)
                value ::
                    print("setting")
                    lbl.y1 = value / 100.

            Label:
                text = "y2"
            SpinBox:
                minimum = 0
                maximum = 100
                value = int(lbl.y2 * 100)
                value ::
                    print("setting")
                    lbl.y2 = value / 100.


            Label:
                text = "stop_0"
            SpinBox:
                minimum = 0
                maximum = 100
                value = int(lbl.stop_0 * 100)
                value ::
                    lbl.stop_0 = value / 100.

            Label:
                text = "stop_1"
            SpinBox:
                minimum = 0
                maximum = 100
                value = int(lbl.stop_1 * 100)
                value ::
                    print("setting")
                    lbl.stop_1 = value / 100.

            Label:
                text = "stop_2"
            SpinBox:
                minimum = 0
                maximum = 100
                value = int(lbl.stop_2 * 100)
                value ::
                    print("setting")
                    lbl.stop_2 = value / 100.

            Label:
                text = "stop_3"
            SpinBox:
                minimum = 0
                maximum = 100
                value = int(lbl.stop_3 * 100)
                value ::
                    print("setting")
                    lbl.stop_3 = value / 100.

            Label:
                text = "Font Color"
            ColorButton:
                hex_color >> lbl.font_color

        PushButton:
            text = "Print Properties"
            clicked ::
                lbl.print_properties()
