"""
It needs conda package: qscintilla2
"""
from enaml.scintilla.scintilla import Scintilla
from enaml.scintilla.themes.idle import IDLE_THEME
from enaml.qt import QtCore
from enaml.widgets.api import *
from enaml.layout.api import *
from functools import partial

CUSTOM_THEME = IDLE_THEME.copy()

CUSTOM_THEME['sql'] = {
        "comment": { "color": "gray" },
        "comment_doc": { "color": "gray" },
        "comment_doc_keyword": { "color": "gray" },
        "comment_doc_keyword_error": { "color": "gray" },
        "comment_line":{ "color": "gray" },
        "comment_line_hash": { "color": "gray" },
        "identifier": {"color": "orange"},
        "keyword": {"color": "blue"},
        "keyword_set5":  {"color": "blue"},
        "keyword_set6":  {"color": "blue"},
        "keyword_set7":  {"color": "blue"},
        "keyword_set8":  {"color": "blue"},
        "number": {"color": "green"},
#        "operator": {"color": "red"},
#        "plus_comment": "PlusComment",
#        "plus_keyword": "PlusKeyword",
#        "plus_prompt": "PlusPrompt",
        "quoted_identifier": {"color": "orange"},
        "single_quoted_string": {"color": "blue"},
}

CUSTOM_THEME['settings']['font'] = '11pt Consolas'


enamldef SQLEditor(Scintilla): editor:
    attr sql
    attr read_only = False
    syntax = 'sql'
    theme = CUSTOM_THEME

    activated ::
        # Margin 0 is used for line numbers
        widget_ = editor.proxy.widget
        widget_.setMarginWidth(0, 22)
        widget_.setMarginLineNumbers(0, True)
        set_text(nonlocals.sql)
        widget_.setReadOnly(nonlocals.read_only)

    read_only ::
        self.proxy.widget.setReadOnly(read_only)


INVALID_JSON = object()  # sentinel


enamldef JSONEditor(Scintilla): editor:
    attr content   # text contents
    attr value
    attr read_only = False
    syntax = 'python'
    theme = CUSTOM_THEME


    settings = {
        'tab_width': 4,
        'use_tabs': False,
        'indent': 4,
        'tab_indents': True,
        'backspace_unindents': True,
    }

    func wheelEvent(self, event):
        if event.modifiers() == QtCore.Qt.ControlModifier:
            delta = event.angleDelta().y()
            if delta > 0:
                self.zoomIn()
            elif delta < 0:
                self.zoomOut()
        else:
            return type(self).wheelEvent(self, event)

    activated ::
        # Margin 0 is used for line numbers
        widget_ = editor.proxy.widget
        widget_.setMarginWidth(0, 22)
        widget_.setMarginLineNumbers(0, True)
        set_text(nonlocals.content)
        widget_.setReadOnly(nonlocals.read_only)
        self.proxy.widget.wheelEvent = partial(wheelEvent, self.proxy.widget)

    read_only ::
        self.proxy.widget.setReadOnly(read_only)

    # every time the text contents change - we need to sync with the json object
    content ::
        import json
        try:
            nonlocals.value = json.loads(contents)
        except Exception:
            nonlocals.value = INVALID_JSON

    value ::
        print('json value changed\n', value)



enamldef Main(MainWindow):
    Container:
        JSONEditor:
            pass